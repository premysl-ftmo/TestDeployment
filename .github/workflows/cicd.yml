name: CI/CD Pipeline

on:
  push:
    branches: 
      - stage
      - prod
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  package:
    name: Package Application
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/dotnet/sdk:9.0-noble

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore dependencies
        run: dotnet restore DeploymentTest

      - name: Publish application
        run: dotnet publish DeploymentTest -r linux-x64 --no-self-contained -o publish

      - name: Upload publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: published-app
          path: publish/
          retention-days: 1

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: package

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download publish artifacts
        uses: actions/download-artifact@v4
        with:
          name: published-app
          path: publish/

      - name: Set execute permissions
        run: chmod +x publish/DeploymentTest

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Update ECS Service
    runs-on: ubuntu-latest
    needs: docker

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
            --service ${{ secrets.AWS_ECS_SERVICE }} \
            --force-new-deployment